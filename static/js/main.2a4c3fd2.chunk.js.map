{"version":3,"sources":["components/Checkbox/Checkbox.js","constants.js","FillInTheBlanks/reducer.js","components/InputText/InputText.js","FillInTheBlanks/makeInitialState.js","FillInTheBlanks/Content.js","FillInTheBlanks/FillInTheBlanks.js","api/makeModel.js","api/makeModels.js","App.js","serviceWorker.js","index.js"],"names":["values","off","on","Checkbox","id","onChange","value","className","checked","data-testid","type","htmlFor","classnames","BLANK","SEPARATOR","modes","blanks","examples","input","prompts","CHANGE","reducer","state","action","copy","InputText","dispatch","hint","inputClassName","classname","length","target","placeholder","placeholderIsMinWidth","makeInitialState","source","match","reduce","accumulator","current","index","Content","mode","model","useReducer","map","getValues","parts","slice","split","result","forEach","part","push","element","key","interpolate","FillInTheBlanks","useState","setMode","AUTHOR","EXAMPLES","FITB","ID","PROMPTS","makeModel","record","get","JSON","parse","undefined","author","process","REACT_APP_AIRTABLE_API_KEY","REACT_APP_AIRTABLE_APP_ID","ACTIVE","API_KEY","APP_ID","DESC","STATUS","TABLE_NAME","makeModels","callback","models","Airtable","apiKey","base","select","filterByFormula","sort","field","direction","eachPage","records","fetchNextPage","error","App","setError","setModels","waiting","setWaiting","useEffect","name","icon","faCircleNotch","spin","stringify","version","Boolean","window","location","hostname","NODE_ENV","REACT_APP_AMPLITUDE_KEY","ReactDOM","render","amplitudeInstance","amplitude","getInstance","logEvent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a4c3fd2.chunk.js","sourcesContent":["import classnames from 'classnames';\nimport React from 'react';\n\nexport const values = {\n  off: 'off',\n  on: 'on'\n};\n\n// TODO: check the html\nfunction Checkbox({ id, onChange, value }) {\n  return (\n    <div className=\"relative\">\n      <input\n        checked={value === values.on}\n        className=\"hidden\"\n        data-testid={id}\n        id={id}\n        onChange={() => onChange(value)}\n        type=\"checkbox\"\n      />\n      <label className=\"cursor-pointer\" htmlFor={id}>\n        <div className=\"w-6 h-3 bg-gray-400 rounded-full shadow-inner\" />\n        <div\n          className={classnames(\n            'toggle__dot absolute w-4 h-4 bg-gray-300 rounded-full shadow inset-y-0 left-0',\n            { 'toggle__dot--checked': value === values.on }\n          )}\n        />\n      </label>\n    </div>\n  );\n}\n\nexport default Checkbox;\n","export const BLANK = '________________';\nexport const SEPARATOR = '__BLANK__';\n\nexport const modes = {\n  blanks: 'blanks',\n  examples: 'examples',\n  input: 'input',\n  prompts: 'prompts'\n};\n","export const CHANGE = 'change';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case CHANGE: {\n      const copy = { ...state };\n      copy[action.value.id] = action.value.value;\n      return copy;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import classname from 'classnames';\nimport React from 'react';\nimport AutosizeInput from 'react-input-autosize';\nimport { BLANK } from '../../constants';\nimport { CHANGE } from '../../FillInTheBlanks/reducer';\n\nfunction InputText({ dispatch, hint, id, value }) {\n  function onChange({ target: { value } }) {\n    dispatch({ type: CHANGE, value: { id, value: value } });\n  }\n\n  return (\n    <span className=\"inline-flex flex-col leading-none\">\n      <AutosizeInput\n        data-testid=\"input\"\n        inputClassName={classname({ 'bg-purple-100': value.length > 0 })}\n        onChange={onChange}\n        placeholder={BLANK}\n        placeholderIsMinWidth={true}\n        value={value}\n      />\n      {hint !== BLANK && <label className=\"self-center text-sm\">{hint}</label>}\n    </span>\n  );\n}\n\nexport default InputText;\n","function makeInitialState(source) {\n  const initialState = source\n    .match(/__BLANK__/g)\n    .reduce((accumulator, current, index) => {\n      accumulator[index] = '';\n      return accumulator;\n    }, {});\n  return initialState;\n}\n\nexport default makeInitialState;\n","import classnames from 'classnames';\nimport React, { useReducer } from 'react';\nimport InputText from '../components/InputText/InputText';\nimport { BLANK, SEPARATOR, modes } from '../constants';\nimport makeInitialState from './makeInitialState';\nimport reducer from './reducer';\n\nfunction getValues(mode, { examples, prompts, source }) {\n  let values = [];\n  const blanks = source.match(/__BLANK__/g).map(() => BLANK); // INFO: not sure if I can interpolate inside a regex\n  switch (mode) {\n    case modes.blanks:\n    default:\n      values = blanks;\n      break;\n    case modes.examples:\n      values = examples;\n      break;\n    case modes.input:\n      if (prompts) {\n        values = prompts;\n      } else {\n        values = blanks;\n      }\n      break;\n    case modes.prompts:\n      values = prompts;\n      break;\n  }\n  return values;\n}\n\nfunction interpolate({ dispatch, mode, source, state, values }) {\n  const text = source.slice();\n  const parts = text.split(SEPARATOR);\n  const result = [];\n  parts.forEach((part, index) => {\n    result.push(part);\n    if (values[index]) {\n      let element;\n      if (mode === modes.input) {\n        const hint = values[index];\n        element = (\n          <InputText\n            dispatch={dispatch}\n            hint={hint}\n            id={index}\n            key={index}\n            value={state[index]}\n          />\n        );\n      } else {\n        element = (\n          <span\n            className={classnames({\n              'bg-yellow-200': mode === modes.blanks,\n              'bg-green-200': mode === modes.examples,\n              'bg-blue-200': mode === modes.prompts\n            })}\n            key={index}\n          >\n            {values[index]}\n          </span>\n        );\n      }\n      result.push(element);\n    }\n  });\n  return result;\n}\n\nfunction Content({ mode, model }) {\n  const [state, dispatch] = useReducer(reducer, makeInitialState(model.source));\n  const values = getValues(mode, model);\n  return interpolate({ dispatch, mode, source: model.source, state, values });\n}\n\nexport default Content;\n","import React, { useState } from 'react';\nimport Checkbox, { values } from '../components/Checkbox/Checkbox';\nimport { modes } from '../constants';\nimport Content from './Content';\n\nfunction FillInTheBlanks({ id, model }) {\n  const [mode, setMode] = useState(modes.input);\n\n  return (\n    <div className=\"leading-loose text-lg my-5\">\n      <Content mode={mode} model={model} />\n      <div className=\"inline-block pl-3\">\n        {model.examples && (\n          <Checkbox\n            id={id}\n            onChange={value => {\n              if (value === values.off) {\n                setMode(modes.examples);\n              }\n              if (value === values.on) {\n                setMode(modes.input);\n              }\n            }}\n            value={mode === modes.examples ? values.on : values.off}\n          />\n        )}\n      </div>\n      <hr className=\"mt-3\" />\n    </div>\n  );\n}\n\nexport default FillInTheBlanks;\n","const AUTHOR = 'Author';\nconst EXAMPLES = 'Examples';\nconst FITB = 'FITB';\nexport const ID = 'ID';\nconst PROMPTS = 'Prompts';\n\nfunction makeModel(record) {\n  const examples = record.get(EXAMPLES)\n    ? JSON.parse(record.get(EXAMPLES))\n    : undefined;\n  const prompts = record.get(PROMPTS)\n    ? JSON.parse(record.get(PROMPTS))\n    : undefined;\n  return {\n    author: record.get(AUTHOR),\n    examples: examples,\n    id: record.get(ID),\n    prompts: prompts,\n    source: record.get(FITB)\n  };\n}\n\nexport default makeModel;\n","import Airtable from 'airtable';\nimport makeModel, { ID } from './makeModel';\n\nconst { REACT_APP_AIRTABLE_API_KEY, REACT_APP_AIRTABLE_APP_ID } = process.env;\n\nconst ACTIVE = 'active';\nconst API_KEY = REACT_APP_AIRTABLE_API_KEY;\nconst APP_ID = REACT_APP_AIRTABLE_APP_ID;\nconst DESC = 'desc';\nconst STATUS = 'Status';\nconst TABLE_NAME = 'FITBs';\n\nfunction makeModels(callback) {\n  const base = new Airtable({ apiKey: API_KEY }).base(APP_ID);\n  let models;\n  base(TABLE_NAME)\n    .select({\n      filterByFormula: `${STATUS}=\"${ACTIVE}\"`,\n      sort: [{ field: ID, direction: DESC }]\n    })\n    .eachPage(\n      function page(records, fetchNextPage) {\n        models = records.map(makeModel);\n        fetchNextPage();\n      },\n      function done(error) {\n        callback(error, models);\n      }\n    );\n}\n\nexport default makeModels;\n","import { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useState } from 'react';\nimport { name, version } from '../package.json';\nimport FillInTheBlanks from './FillInTheBlanks/FillInTheBlanks';\nimport makeModels from './api/makeModels';\n\nfunction App() {\n  const [error, setError] = useState();\n  const [models, setModels] = useState([]);\n  const [waiting, setWaiting] = useState(true);\n\n  useEffect(() => {\n    makeModels((error, models) => {\n      if (error) {\n        setError(error);\n      } else {\n        setModels(models);\n      }\n      setWaiting(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"flex flex-col font-serif items-center max-w-4xl mx-16 sm:mx-32 md:mx-32 lg:mx-32 xl:mx-auto\">\n      <h1 className=\"capitalize font-normal hover:font-bold text-4xl text-gray-900\">\n        {name}\n      </h1>\n      {waiting ? (\n        <FontAwesomeIcon\n          className=\"text-4xl\"\n          icon={faCircleNotch}\n          spin={true}\n        />\n      ) : error ? (\n        <pre>{JSON.stringify(error, 0, 2)}</pre>\n      ) : (\n        <ul>\n          {models.map((model, index) => (\n            <li key={index}>\n              <FillInTheBlanks id={index} model={model} />\n            </li>\n          ))}\n        </ul>\n      )}\n      <small className=\"font-normal hover:font-bold text-gray-700 text-sm\">\n        v{version}\n      </small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Amplitude, AmplitudeProvider } from '@amplitude/react-amplitude';\nimport amplitude from 'amplitude-js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { name, version } from '../package.json';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst { NODE_ENV, REACT_APP_AMPLITUDE_KEY } = process.env;\n\nReactDOM.render(\n  <AmplitudeProvider\n    amplitudeInstance={amplitude.getInstance()}\n    apiKey={REACT_APP_AMPLITUDE_KEY}\n  >\n    <Amplitude>\n      {({ logEvent }) => {\n        // INFO: https://github.com/amplitude/react-amplitude#amplitude-props\n        logEvent(`hello ${name} v${version} ${NODE_ENV}`); // TODO: move to constants\n        return <App />;\n      }}\n    </Amplitude>\n  </AmplitudeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}