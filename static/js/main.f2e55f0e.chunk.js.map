{"version":3,"sources":["constants.js","FillInTheBlanks/reducer.js","FillInTheBlanks/InputText.js","FillInTheBlanks/makeInitialState.js","FillInTheBlanks/modes.js","FillInTheBlanks/Content.js","FillInTheBlanks/Radio.js","FillInTheBlanks/FillInTheBlanks.js","makeModels.js","App.js","serviceWorker.js","index.js"],"names":["BLANK","SEPARATOR","CHANGE","reducer","state","action","type","copy","value","id","InputText","dispatch","hint","className","data-testid","inputClassName","classname","length","onChange","target","placeholder","placeholderIsMinWidth","makeInitialState","source","match","reduce","accumulator","current","index","modes","blanks","examples","input","prompts","Content","mode","model","useReducer","values","map","getValues","parts","slice","split","result","forEach","part","push","element","key","classnames","interpolate","Radio","inputId","checked","name","htmlFor","FillInTheBlanks","useState","setMode","process","REACT_APP_AIRTABLE_API_KEY","REACT_APP_AIRTABLE_APP_ID","API_KEY","APP_ID","EXAMPLES","FITB","ID","PROMPTS","STATUS","TABLE_NAME","statuses","active","makeModels","callback","base","Airtable","apiKey","models","select","sort","field","direction","eachPage","records","fetchNextPage","record","get","JSON","parse","undefined","error","App","setError","setModels","waiting","setWaiting","useEffect","icon","faCircleNotch","spin","stringify","version","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2e55f0e.chunk.js","sourcesContent":["export const BLANK = '________________';\nexport const SEPARATOR = '__BLANK__';\n","export const CHANGE = 'change';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case CHANGE: {\n      const copy = { ...state };\n      copy[action.value.id] = action.value.value;\n      return copy;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import classname from 'classnames';\nimport React from 'react';\nimport AutosizeInput from 'react-input-autosize';\nimport { BLANK } from '../constants';\nimport { CHANGE } from './reducer';\n\nfunction InputText({ dispatch, hint, id, value }) {\n  function onChange({ target: { value } }) {\n    dispatch({ type: CHANGE, value: { id, value: value } });\n  }\n\n  return (\n    <span className=\"inline-flex flex-col leading-none\">\n      <AutosizeInput\n        data-testid=\"input\"\n        inputClassName={classname({ 'bg-purple-100': value.length > 0 })}\n        onChange={onChange}\n        placeholder={BLANK}\n        placeholderIsMinWidth={true}\n        value={value}\n      />\n      {hint !== BLANK && <label className=\"self-center text-sm\">{hint}</label>}\n    </span>\n  );\n}\n\nexport default InputText;\n","function makeInitialState(source) {\n  const initialState = source\n    .match(/__BLANK__/g)\n    .reduce((accumulator, current, index) => {\n      accumulator[index] = '';\n      return accumulator;\n    }, {});\n  return initialState;\n}\n\nexport default makeInitialState;\n","const modes = {\n  blanks: 'blanks',\n  examples: 'examples',\n  input: 'input',\n  prompts: 'prompts'\n};\n\nexport default modes;\n","import classnames from 'classnames';\nimport React, { useReducer } from 'react';\nimport { BLANK, SEPARATOR } from '../constants';\nimport InputText from './InputText';\nimport makeInitialState from './makeInitialState';\nimport modes from './modes';\nimport reducer from './reducer';\n\nfunction getValues(mode, { examples, prompts, source }) {\n  let values = [];\n  const blanks = source.match(/__BLANK__/g).map(() => BLANK); // INFO: not sure if I can interpolate inside a regex\n  switch (mode) {\n    case modes.blanks:\n    default:\n      values = blanks;\n      break;\n    case modes.examples:\n      values = examples;\n      break;\n    case modes.input:\n      if (prompts) {\n        values = prompts;\n      } else {\n        values = blanks;\n      }\n      break;\n    case modes.prompts:\n      values = prompts;\n      break;\n  }\n  return values;\n}\n\nfunction interpolate({ dispatch, mode, source, state, values }) {\n  const text = source.slice();\n  const parts = text.split(SEPARATOR);\n  const result = [];\n  parts.forEach((part, index) => {\n    result.push(part);\n    if (values[index]) {\n      let element;\n      if (mode === modes.input) {\n        const hint = values[index];\n        element = (\n          <InputText\n            dispatch={dispatch}\n            hint={hint}\n            id={index}\n            key={index}\n            value={state[index]}\n          />\n        );\n      } else {\n        element = (\n          <span\n            className={classnames({\n              'bg-yellow-200': mode === modes.blanks,\n              'bg-green-200': mode === modes.examples,\n              'bg-blue-200': mode === modes.prompts\n            })}\n            key={index}\n          >\n            {values[index]}\n          </span>\n        );\n      }\n      result.push(element);\n    }\n  });\n  return result;\n}\n\nfunction Content({ mode, model }) {\n  const [state, dispatch] = useReducer(reducer, makeInitialState(model.source));\n  const values = getValues(mode, model);\n  return interpolate({ dispatch, mode, source: model.source, state, values });\n}\n\nexport default Content;\n","import React from 'react';\n\nfunction Radio({ id, mode, onChange, value }) {\n  const inputId = `${id}-${value}`;\n  return (\n    <>\n      <input\n        checked={mode === value}\n        data-testid={inputId}\n        id={inputId}\n        name={id}\n        onChange={onChange}\n        type=\"radio\"\n        value={value}\n      />\n      <label className=\"ml-2\" htmlFor={inputId}>\n        {value}\n      </label>\n    </>\n  );\n}\n\nexport default Radio;\n","import React, { useState } from 'react';\nimport Content from './Content';\nimport Radio from './Radio';\nimport modes from './modes';\n\nfunction FillInTheBlanks({ id, model }) {\n  const [mode, setMode] = useState(modes.input);\n\n  return (\n    <>\n      <div className=\"leading-loose text-lg\">\n        <Content mode={mode} model={model} />\n      </div>\n      <ul className=\"p-4\">\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.blanks)}\n            value={modes.blanks}\n          />\n        </li>\n        {model.examples && (\n          <li>\n            <Radio\n              id={id}\n              mode={mode}\n              onChange={() => setMode(modes.examples)}\n              value={modes.examples}\n            />\n          </li>\n        )}\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.input)}\n            value={modes.input}\n          />\n        </li>\n        {model.prompts && (\n          <li>\n            <Radio\n              id={id}\n              mode={mode}\n              onChange={() => setMode(modes.prompts)}\n              value={modes.prompts}\n            />\n          </li>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default FillInTheBlanks;\n","import Airtable from 'airtable';\n\nconst { REACT_APP_AIRTABLE_API_KEY, REACT_APP_AIRTABLE_APP_ID } = process.env;\n\nconst API_KEY = REACT_APP_AIRTABLE_API_KEY;\nconst APP_ID = REACT_APP_AIRTABLE_APP_ID;\nconst EXAMPLES = 'Examples';\nconst FITB = 'FITB';\nconst ID = 'ID';\nconst PROMPTS = 'Prompts';\nconst STATUS = 'Status';\nconst TABLE_NAME = 'FITBs';\n\nconst statuses = {\n  active: 'active'\n};\n\nfunction makeModels(callback) {\n  const base = new Airtable({ apiKey: API_KEY }).base(APP_ID);\n  const models = [];\n  base(TABLE_NAME)\n    .select({\n      sort: [{ field: ID, direction: 'desc' }]\n    })\n    .eachPage(\n      function page(records, fetchNextPage) {\n        records.forEach(function(record) {\n          const status = record.get(STATUS);\n          if (status === statuses.active) {\n            const examples = record.get(EXAMPLES)\n              ? JSON.parse(record.get(EXAMPLES))\n              : undefined;\n            const prompts = record.get(PROMPTS)\n              ? JSON.parse(record.get(PROMPTS))\n              : undefined;\n            models.push({\n              examples: examples,\n              prompts: prompts,\n              source: record.get(FITB)\n            });\n          }\n        });\n        fetchNextPage();\n      },\n      function done(error) {\n        callback(error, models);\n      }\n    );\n}\n\nexport default makeModels;\n","import { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useState } from 'react';\nimport { name, version } from '../package.json';\nimport FillInTheBlanks from './FillInTheBlanks/FillInTheBlanks';\nimport makeModels from './makeModels';\n\nfunction App() {\n  const [error, setError] = useState();\n  const [models, setModels] = useState([]);\n  const [waiting, setWaiting] = useState(true);\n\n  useEffect(() => {\n    makeModels((error, models) => {\n      if (error) {\n        setError(error);\n      } else {\n        setModels(models);\n      }\n      setWaiting(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"flex flex-col font-serif items-center max-w-4xl mx-16 sm:mx-32 md:mx-32 lg:mx-32 xl:mx-auto\">\n      <h1 className=\"capitalize font-normal hover:font-bold text-4xl text-gray-900\">\n        {name}\n      </h1>\n      {waiting ? (\n        <FontAwesomeIcon\n          className=\"text-4xl\"\n          icon={faCircleNotch}\n          spin={true}\n        />\n      ) : error ? (\n        <pre>{JSON.stringify(error, 0, 2)}</pre>\n      ) : (\n        <ul>\n          {models.map((model, index) => (\n            <li key={index}>\n              <FillInTheBlanks id={index} model={model} />\n            </li>\n          ))}\n        </ul>\n      )}\n      <small className=\"font-normal hover:font-bold text-gray-700 text-sm\">\n        v{version}\n      </small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}