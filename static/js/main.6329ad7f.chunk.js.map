{"version":3,"sources":["FillInTheBlanks/modes.js","FillInTheBlanks/Content.js","FillInTheBlanks/Radio.js","FillInTheBlanks/FillInTheBlanks.js","App.js","serviceWorker.js","index.js"],"names":["modes","blanks","examples","input","prompts","BLANK","SEPARATOR","Content","mode","model","values","source","match","map","getValues","parts","slice","split","result","forEach","part","index","push","element","className","classnames","key","interpolate","Radio","id","onChange","value","inputId","checked","name","type","htmlFor","FillInTheBlanks","useState","setMode","App","models","version","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g7BAOeA,EAPD,CACZC,OAAQ,SACRC,SAAU,WACVC,MAAO,QACPC,QAAS,WCALC,EAAQ,mBACRC,EAAY,YAmDHC,MALf,YAAmC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACjBC,EA7CR,SAAmBF,EAAnB,GAAyD,IAA9BN,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,QAASO,EAAU,EAAVA,OACxCD,EAAS,GACb,OAAQF,GACN,KAAKR,EAAMC,OACX,QACES,EAASC,EAAOC,MAAM,cAAcC,KAAI,kBAAMR,KAC9C,MACF,KAAKL,EAAME,SACTQ,EAASR,EACT,MACF,KAAKF,EAAMG,MACT,MACF,KAAKH,EAAMI,QACTM,EAASN,EAGb,OAAOM,EA6BQI,CAAUN,EAAMC,GAC/B,OA3BF,SAAqBD,EAAMG,EAAQD,GACjC,IACMK,EADOJ,EAAOK,QACDC,MAAMX,GACnBY,EAAS,GAmBf,OAlBAH,EAAMI,SAAQ,SAACC,EAAMC,GAEnB,GADAH,EAAOI,KAAKF,GACRV,EAAOW,GAAQ,CACjB,IAAME,EACJ,0BACEC,UAAWC,IAAW,CACpB,cAAejB,IAASR,EAAMI,QAC9B,eAAgBI,IAASR,EAAME,SAC/B,gBAAiBM,IAASR,EAAMC,SAElCyB,IAAKL,GAEJX,EAAOW,IAGZH,EAAOI,KAAKC,OAGTL,EAKAS,CAAYnB,EAAMC,EAAME,OAAQD,IChC1BkB,MAnBf,YAA+C,IAA9BC,EAA6B,EAA7BA,GAAIrB,EAAyB,EAAzBA,KAAMsB,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC7BC,EAAO,UAAMH,EAAN,YAAYE,GACzB,OACE,oCACE,2BACEE,QAASzB,IAASuB,EAClBF,GAAIG,EACJE,KAAML,EACNC,SAAUA,EACVK,KAAK,QACLJ,MAAOA,IAET,2BAAOP,UAAU,OAAOY,QAASJ,GAC9BD,KC4BMM,MAtCf,YAAyC,IAAdR,EAAa,EAAbA,GAAIpB,EAAS,EAATA,MAAS,EACd6B,mBAAStC,EAAMC,QADD,mBAC/BO,EAD+B,KACzB+B,EADyB,KAGtC,OACE,oCACE,2BACE,kBAAC,EAAD,CAAS/B,KAAMA,EAAMC,MAAOA,KAE9B,wBAAIe,UAAU,OACZ,4BACE,kBAAC,EAAD,CACEK,GAAIA,EACJrB,KAAMA,EACNsB,SAAU,kBAAMS,EAAQvC,EAAMC,SAC9B8B,MAAO/B,EAAMC,UAGjB,4BACE,kBAAC,EAAD,CACE4B,GAAIA,EACJrB,KAAMA,EACNsB,SAAU,kBAAMS,EAAQvC,EAAME,WAC9B6B,MAAO/B,EAAME,YAGjB,4BACE,kBAAC,EAAD,CACE2B,GAAIA,EACJrB,KAAMA,EACNsB,SAAU,kBAAMS,EAAQvC,EAAMI,UAC9B2B,MAAO/B,EAAMI,c,OCVVoC,MApBf,WACE,OACE,yBAAKhB,UAAU,6DACb,wBAAIA,UAAU,iEACXU,KAEH,4BACGO,EAAO5B,KAAI,SAACJ,EAAOY,GAAR,OACV,wBAAIK,IAAKL,GACP,kBAAC,EAAD,CAAiBQ,GAAIR,EAAOZ,MAAOA,SAIzC,2BAAOe,UAAU,qDAAjB,IACIkB,OCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlC,MACvB,2DCZNmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6329ad7f.chunk.js","sourcesContent":["const modes = {\n  blanks: 'blanks',\n  examples: 'examples',\n  input: 'input',\n  prompts: 'prompts'\n};\n\nexport default modes;\n","import classnames from 'classnames';\nimport React from 'react';\nimport modes from './modes';\n\nconst BLANK = '________________';\nconst SEPARATOR = '__BLANK__';\n\nfunction getValues(mode, { examples, prompts, source }) {\n  let values = [];\n  switch (mode) {\n    case modes.blanks:\n    default:\n      values = source.match(/__BLANK__/g).map(() => BLANK);\n      break;\n    case modes.examples:\n      values = examples;\n      break;\n    case modes.input:\n      break;\n    case modes.prompts:\n      values = prompts;\n      break;\n  }\n  return values;\n}\n\nfunction interpolate(mode, source, values) {\n  const text = source.slice();\n  const parts = text.split(SEPARATOR);\n  const result = [];\n  parts.forEach((part, index) => {\n    result.push(part);\n    if (values[index]) {\n      const element = (\n        <span\n          className={classnames({\n            'bg-blue-200': mode === modes.prompts,\n            'bg-green-200': mode === modes.examples,\n            'bg-yellow-200': mode === modes.blanks\n          })}\n          key={index}\n        >\n          {values[index]}\n        </span>\n      );\n      result.push(element);\n    }\n  });\n  return result;\n}\n\nfunction Content({ mode, model }) {\n  const values = getValues(mode, model);\n  return interpolate(mode, model.source, values);\n}\n\nexport default Content;\n","import React from 'react';\n\nfunction Radio({ id, mode, onChange, value }) {\n  const inputId = `${id}-${value}`;\n  return (\n    <>\n      <input\n        checked={mode === value}\n        id={inputId}\n        name={id}\n        onChange={onChange}\n        type=\"radio\"\n        value={value}\n      />\n      <label className=\"ml-2\" htmlFor={inputId}>\n        {value}\n      </label>\n    </>\n  );\n}\n\nexport default Radio;\n","import React, { useState } from 'react';\nimport Content from './Content';\nimport Radio from './Radio';\nimport modes from './modes';\n\nfunction FillInTheBlanks({ id, model }) {\n  const [mode, setMode] = useState(modes.blanks);\n\n  return (\n    <>\n      <p>\n        <Content mode={mode} model={model} />\n      </p>\n      <ul className=\"p-4\">\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.blanks)}\n            value={modes.blanks}\n          />\n        </li>\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.examples)}\n            value={modes.examples}\n          />\n        </li>\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.prompts)}\n            value={modes.prompts}\n          />\n        </li>\n      </ul>\n    </>\n  );\n}\n\nexport default FillInTheBlanks;\n","import React from 'react';\nimport { name, version } from '../package.json';\nimport FillInTheBlanks from './FillInTheBlanks/FillInTheBlanks';\nimport models from './models.json';\n\nfunction App() {\n  return (\n    <div className=\"flex flex-col font-serif items-center mx-auto my-12 w-3/4\">\n      <h1 className=\"capitalize font-normal hover:font-bold text-4xl text-gray-900\">\n        {name}\n      </h1>\n      <ul>\n        {models.map((model, index) => (\n          <li key={index}>\n            <FillInTheBlanks id={index} model={model} />\n          </li>\n        ))}\n      </ul>\n      <small className=\"font-normal hover:font-bold text-gray-700 text-sm\">\n        v{version}\n      </small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}