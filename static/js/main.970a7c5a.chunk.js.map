{"version":3,"sources":["FillInTheBlanks/InputText.js","FillInTheBlanks/modes.js","FillInTheBlanks/Content.js","FillInTheBlanks/Radio.js","FillInTheBlanks/FillInTheBlanks.js","makeModels.js","App.js","serviceWorker.js","index.js"],"names":["InputText","placeholder","useState","length","size","setSize","data-testid","onChange","e","value","target","type","modes","blanks","examples","input","prompts","BLANK","SEPARATOR","Content","mode","model","values","source","match","map","getValues","parts","slice","split","result","forEach","part","index","push","element","key","className","classnames","interpolate","Radio","id","inputId","checked","name","htmlFor","FillInTheBlanks","setMode","process","REACT_APP_AIRTABLE_API_KEY","REACT_APP_AIRTABLE_APP_ID","API_KEY","APP_ID","EXAMPLES","FITB","ID","PROMPTS","STATUS","TABLE_NAME","statuses","active","makeModels","callback","base","Airtable","apiKey","models","select","sort","field","direction","eachPage","records","fetchNextPage","record","get","JSON","parse","undefined","error","App","setError","setModels","waiting","setWaiting","useEffect","icon","faCircleNotch","spin","stringify","version","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAwBeA,MAtBf,YAAqC,IAAhBC,EAAe,EAAfA,YAAe,EACVC,mBAASD,EAAYE,QADX,mBAC3BC,EAD2B,KACrBC,EADqB,KAWlC,OACE,2BACEC,cAAY,QACZC,SAAU,SAAAC,GAXd,IAAkBC,KAWUD,EAAEE,OAAOD,OAVzBN,OAASF,EAAYE,OAC7BE,EAAQI,EAAMN,QAEdE,EAAQJ,EAAYE,SAQpBF,YAAaA,EACbG,KAAMA,EACNO,KAAK,UCZIC,EAPD,CACZC,OAAQ,SACRC,SAAU,WACVC,MAAO,QACPC,QAAS,WCCLC,EAAQ,mBACRC,EAAY,YA+DHC,MALf,YAAmC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACjBC,EAzDR,SAAmBF,EAAnB,GAAyD,IAA9BN,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,QAC/BM,EAAS,GACPT,EAFgD,EAAVU,OAEtBC,MAAM,cAAcC,KAAI,kBAAMR,KACpD,OAAQG,GACN,KAAKR,EAAMC,OACX,QACES,EAAST,EACT,MACF,KAAKD,EAAME,SACTQ,EAASR,EACT,MACF,KAAKF,EAAMG,MAEPO,EADEN,GAGOH,EAEX,MACF,KAAKD,EAAMI,QACTM,EAASN,EAGb,OAAOM,EAmCQI,CAAUN,EAAMC,GAC/B,OAjCF,SAAqBD,EAAMG,EAAQD,GACjC,IACMK,EADOJ,EAAOK,QACDC,MAAMX,GACnBY,EAAS,GAyBf,OAxBAH,EAAMI,SAAQ,SAACC,EAAMC,GAEnB,GADAH,EAAOI,KAAKF,GACRV,EAAOW,GAAQ,CACjB,IAAIE,EACJ,GAAIf,IAASR,EAAMG,MAAO,CACxB,IAAMd,EAAcqB,EAAOW,GAC3BE,EAAU,kBAAC,EAAD,CAAWC,IAAKH,EAAOhC,YAAaA,SAE9CkC,EACE,0BACEE,UAAWC,IAAW,CACpB,gBAAiBlB,IAASR,EAAMC,OAChC,eAAgBO,IAASR,EAAME,SAC/B,cAAeM,IAASR,EAAMI,UAEhCoB,IAAKH,GAEJX,EAAOW,IAIdH,EAAOI,KAAKC,OAGTL,EAKAS,CAAYnB,EAAMC,EAAME,OAAQD,IC5C1BkB,MApBf,YAA+C,IAA9BC,EAA6B,EAA7BA,GAAIrB,EAAyB,EAAzBA,KAAMb,EAAmB,EAAnBA,SAAUE,EAAS,EAATA,MAC7BiC,EAAO,UAAMD,EAAN,YAAYhC,GACzB,OACE,oCACE,2BACEkC,QAASvB,IAASX,EAClBH,cAAaoC,EACbD,GAAIC,EACJE,KAAMH,EACNlC,SAAUA,EACVI,KAAK,QACLF,MAAOA,IAET,2BAAO4B,UAAU,OAAOQ,QAASH,GAC9BjC,KCuCMqC,MAlDf,YAAyC,IAAdL,EAAa,EAAbA,GAAIpB,EAAS,EAATA,MAAS,EACdnB,mBAASU,EAAMC,QADD,mBAC/BO,EAD+B,KACzB2B,EADyB,KAGtC,OACE,oCACE,2BACE,kBAAC,EAAD,CAAS3B,KAAMA,EAAMC,MAAOA,KAE9B,wBAAIgB,UAAU,OACZ,4BACE,kBAAC,EAAD,CACEI,GAAIA,EACJrB,KAAMA,EACNb,SAAU,kBAAMwC,EAAQnC,EAAMC,SAC9BJ,MAAOG,EAAMC,UAGhBQ,EAAMP,UACL,4BACE,kBAAC,EAAD,CACE2B,GAAIA,EACJrB,KAAMA,EACNb,SAAU,kBAAMwC,EAAQnC,EAAME,WAC9BL,MAAOG,EAAME,YAInB,4BACE,kBAAC,EAAD,CACE2B,GAAIA,EACJrB,KAAMA,EACNb,SAAU,kBAAMwC,EAAQnC,EAAMG,QAC9BN,MAAOG,EAAMG,SAGhBM,EAAML,SACL,4BACE,kBAAC,EAAD,CACEyB,GAAIA,EACJrB,KAAMA,EACNb,SAAU,kBAAMwC,EAAQnC,EAAMI,UAC9BP,MAAOG,EAAMI,c,mBC5CuCgC,qJAA1DC,E,EAAAA,2BAA4BC,E,EAAAA,0BAE9BC,EAAUF,EACVG,EAASF,EACTG,EAAW,WACXC,EAAO,OACPC,EAAK,KACLC,EAAU,UACVC,EAAS,SACTC,EAAa,QAEbC,EAAW,CACfC,OAAQ,UAoCKC,MAjCf,SAAoBC,GAClB,IAAMC,EAAO,IAAIC,IAAS,CAAEC,OAAQd,IAAWY,KAAKX,GAC9Cc,EAAS,GACfH,EAAKL,GACFS,OAAO,CACNC,KAAM,CAAC,CAAEC,MAAOd,EAAIe,UAAW,WAEhCC,UACC,SAAcC,EAASC,GACrBD,EAAQzC,SAAQ,SAAS2C,GAEvB,GADeA,EAAOC,IAAIlB,KACXE,EAASC,OAAQ,CAC9B,IAAM9C,EAAW4D,EAAOC,IAAItB,GACxBuB,KAAKC,MAAMH,EAAOC,IAAItB,SACtByB,EACE9D,EAAU0D,EAAOC,IAAInB,GACvBoB,KAAKC,MAAMH,EAAOC,IAAInB,SACtBsB,EACJZ,EAAOhC,KAAK,CACVpB,SAAUA,EACVE,QAASA,EACTO,OAAQmD,EAAOC,IAAIrB,SAIzBmB,OAEF,SAAcM,GACZjB,EAASiB,EAAOb,OCOTc,MA7Cf,WAAgB,IAAD,EACa9E,qBADb,mBACN6E,EADM,KACCE,EADD,OAEe/E,mBAAS,IAFxB,mBAENgE,EAFM,KAEEgB,EAFF,OAGiBhF,oBAAS,GAH1B,mBAGNiF,EAHM,KAGGC,EAHH,KAgBb,OAXAC,qBAAU,WACRxB,GAAW,SAACkB,EAAOb,GACba,EACFE,EAASF,GAETG,EAAUhB,GAEZkB,GAAW,QAEZ,IAGD,yBAAK/C,UAAU,6DACb,wBAAIA,UAAU,iEACXO,KAEFuC,EACC,kBAAC,IAAD,CACE9C,UAAU,WACViD,KAAMC,IACNC,MAAM,IAENT,EACF,6BAAMH,KAAKa,UAAUV,EAAO,EAAG,IAE/B,4BACGb,EAAOzC,KAAI,SAACJ,EAAOY,GAAR,OACV,wBAAIG,IAAKH,GACP,kBAAC,EAAD,CAAiBQ,GAAIR,EAAOZ,MAAOA,SAK3C,2BAAOgB,UAAU,qDAAjB,IACIqD,OClCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStE,MACvB,2DCZNuE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.970a7c5a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction InputText({ placeholder }) {\n  const [size, setSize] = useState(placeholder.length);\n\n  function onChange(value) {\n    if (value.length > placeholder.length) {\n      setSize(value.length);\n    } else {\n      setSize(placeholder.length);\n    }\n  }\n\n  return (\n    <input\n      data-testid=\"input\"\n      onChange={e => onChange(e.target.value)}\n      placeholder={placeholder}\n      size={size}\n      type=\"text\"\n    />\n  );\n}\n\nexport default InputText;\n","const modes = {\n  blanks: 'blanks',\n  examples: 'examples',\n  input: 'input',\n  prompts: 'prompts'\n};\n\nexport default modes;\n","import classnames from 'classnames';\nimport React from 'react';\nimport InputText from './InputText';\nimport modes from './modes';\n\nconst BLANK = '________________';\nconst SEPARATOR = '__BLANK__';\n\nfunction getValues(mode, { examples, prompts, source }) {\n  let values = [];\n  const blanks = source.match(/__BLANK__/g).map(() => BLANK);\n  switch (mode) {\n    case modes.blanks:\n    default:\n      values = blanks;\n      break;\n    case modes.examples:\n      values = examples;\n      break;\n    case modes.input:\n      if (prompts) {\n        values = prompts;\n      } else {\n        values = blanks;\n      }\n      break;\n    case modes.prompts:\n      values = prompts;\n      break;\n  }\n  return values;\n}\n\nfunction interpolate(mode, source, values) {\n  const text = source.slice();\n  const parts = text.split(SEPARATOR);\n  const result = [];\n  parts.forEach((part, index) => {\n    result.push(part);\n    if (values[index]) {\n      let element;\n      if (mode === modes.input) {\n        const placeholder = values[index];\n        element = <InputText key={index} placeholder={placeholder} />;\n      } else {\n        element = (\n          <span\n            className={classnames({\n              'bg-yellow-200': mode === modes.blanks,\n              'bg-green-200': mode === modes.examples,\n              'bg-blue-200': mode === modes.prompts\n            })}\n            key={index}\n          >\n            {values[index]}\n          </span>\n        );\n      }\n      result.push(element);\n    }\n  });\n  return result;\n}\n\nfunction Content({ mode, model }) {\n  const values = getValues(mode, model);\n  return interpolate(mode, model.source, values);\n}\n\nexport default Content;\n","import React from 'react';\n\nfunction Radio({ id, mode, onChange, value }) {\n  const inputId = `${id}-${value}`;\n  return (\n    <>\n      <input\n        checked={mode === value}\n        data-testid={inputId}\n        id={inputId}\n        name={id}\n        onChange={onChange}\n        type=\"radio\"\n        value={value}\n      />\n      <label className=\"ml-2\" htmlFor={inputId}>\n        {value}\n      </label>\n    </>\n  );\n}\n\nexport default Radio;\n","import React, { useState } from 'react';\nimport Content from './Content';\nimport Radio from './Radio';\nimport modes from './modes';\n\nfunction FillInTheBlanks({ id, model }) {\n  const [mode, setMode] = useState(modes.blanks);\n\n  return (\n    <>\n      <p>\n        <Content mode={mode} model={model} />\n      </p>\n      <ul className=\"p-4\">\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.blanks)}\n            value={modes.blanks}\n          />\n        </li>\n        {model.examples && (\n          <li>\n            <Radio\n              id={id}\n              mode={mode}\n              onChange={() => setMode(modes.examples)}\n              value={modes.examples}\n            />\n          </li>\n        )}\n        <li>\n          <Radio\n            id={id}\n            mode={mode}\n            onChange={() => setMode(modes.input)}\n            value={modes.input}\n          />\n        </li>\n        {model.prompts && (\n          <li>\n            <Radio\n              id={id}\n              mode={mode}\n              onChange={() => setMode(modes.prompts)}\n              value={modes.prompts}\n            />\n          </li>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default FillInTheBlanks;\n","import Airtable from 'airtable';\n\nconst { REACT_APP_AIRTABLE_API_KEY, REACT_APP_AIRTABLE_APP_ID } = process.env;\n\nconst API_KEY = REACT_APP_AIRTABLE_API_KEY;\nconst APP_ID = REACT_APP_AIRTABLE_APP_ID;\nconst EXAMPLES = 'Examples';\nconst FITB = 'FITB';\nconst ID = 'ID';\nconst PROMPTS = 'Prompts';\nconst STATUS = 'Status';\nconst TABLE_NAME = 'FITBs';\n\nconst statuses = {\n  active: 'active'\n};\n\nfunction makeModels(callback) {\n  const base = new Airtable({ apiKey: API_KEY }).base(APP_ID);\n  const models = [];\n  base(TABLE_NAME)\n    .select({\n      sort: [{ field: ID, direction: 'desc' }]\n    })\n    .eachPage(\n      function page(records, fetchNextPage) {\n        records.forEach(function(record) {\n          const status = record.get(STATUS);\n          if (status === statuses.active) {\n            const examples = record.get(EXAMPLES)\n              ? JSON.parse(record.get(EXAMPLES))\n              : undefined;\n            const prompts = record.get(PROMPTS)\n              ? JSON.parse(record.get(PROMPTS))\n              : undefined;\n            models.push({\n              examples: examples,\n              prompts: prompts,\n              source: record.get(FITB)\n            });\n          }\n        });\n        fetchNextPage();\n      },\n      function done(error) {\n        callback(error, models);\n      }\n    );\n}\n\nexport default makeModels;\n","import { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useState } from 'react';\nimport { name, version } from '../package.json';\nimport FillInTheBlanks from './FillInTheBlanks/FillInTheBlanks';\nimport makeModels from './makeModels';\n\nfunction App() {\n  const [error, setError] = useState();\n  const [models, setModels] = useState([]);\n  const [waiting, setWaiting] = useState(true);\n\n  useEffect(() => {\n    makeModels((error, models) => {\n      if (error) {\n        setError(error);\n      } else {\n        setModels(models);\n      }\n      setWaiting(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"flex flex-col font-serif items-center mx-auto my-12 w-3/4\">\n      <h1 className=\"capitalize font-normal hover:font-bold text-4xl text-gray-900\">\n        {name}\n      </h1>\n      {waiting ? (\n        <FontAwesomeIcon\n          className=\"text-4xl\"\n          icon={faCircleNotch}\n          spin={true}\n        />\n      ) : error ? (\n        <pre>{JSON.stringify(error, 0, 2)}</pre>\n      ) : (\n        <ul>\n          {models.map((model, index) => (\n            <li key={index}>\n              <FillInTheBlanks id={index} model={model} />\n            </li>\n          ))}\n        </ul>\n      )}\n      <small className=\"font-normal hover:font-bold text-gray-700 text-sm\">\n        v{version}\n      </small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}